package csc2b.client;

import java.io.BufferedReader;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.lang.module.ResolutionException;
import java.net.Socket;
import java.util.ArrayList;
import java.util.StringTokenizer;

import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.ListView;
import javafx.scene.control.TextArea;
import javafx.scene.control.TextField;
import javafx.scene.layout.GridPane;

public class ZEDEMClientPane extends GridPane //You may change the JavaFX pane layout
{
	
	Label lblUserame = new Label("Username: ");
	Label lblPassword = new Label("Password: ");
	Label lblID = new Label("ID: ");
	Label lblConnectionSatut = new Label("Connection Status: ");
	Label lblResponse = new Label("Response: ");
	
	TextField txtUsername = new TextField("User");
	TextField txtPassword = new TextField("Pass235");
	TextField txtID = new TextField("");		//to enter the download ID
	TextField txtConnectionStatus = new TextField();
	TextField txtResponse = new TextField();
	
	//TextArea txtList = new TextArea();
	
	ListView<String> songListView = new ListView<String>();
	
	Button btnLogin = new Button("Login");
	Button btnList = new Button("List");
	Button btnDownload = new Button("Download");
	Button btnLogout = new Button("Logout");
	
	//streams
	Socket client;
	PrintWriter pw;		//i dont think ill need this
	BufferedReader br;
	DataInputStream dis;
	DataOutputStream dos;

	
	public ZEDEMClientPane() {
		
		setVgap(10);
		setHgap(10);
		
		add(lblUserame, 0, 0);
		add(txtUsername, 1, 0);
		add(lblPassword, 0, 1);
		add(txtPassword, 1, 1);
		add(btnLogin, 0, 4);
		add(lblConnectionSatut, 3, 0);
		add(txtConnectionStatus, 4, 0);
		
		add(lblResponse, 3, 1);
		add(txtResponse, 4, 1);
		
		
		
		try {
			client = new Socket("localhost", 2021);
			txtConnectionStatus.setText("online");
			//pw = new PrintWriter(client.getOutputStream());
			//br = new BufferedReader(new InputStreamReader(client.getInputStream()));
			//dis = new DataInputStream(client.getInputStream());
			//dos = new DataOutputStream(client.getOutputStream());
		}catch(IOException ex) {
			ex.printStackTrace();
		}
		
		//remember to do a connect button
		//btnConnect
		
		btnLogin.setOnAction(e-> {
			Login(txtUsername.getText(), txtPassword.getText());
		});
		
		btnList.setOnAction(e-> {
			PlayList();
		});
		
		btnDownload.setOnAction(e-> {
			Download();
		});
		
		btnLogout.setOnAction(e-> {
			
			try {
				client.close();
				pw.close();
				br.close();
				dis.close();
				dos.close();
			} catch (IOException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
			
		});
		
	}
	
	public void Login(String username, String password) {
		sendCommand("BONJOUR <"+username+"> <"+password+">");
		String response = readResponse();
		txtResponse.setText(response);
		
		if(response.contains("JA"))
		{	
			txtConnectionStatus.setText("Connected");
			
			add(btnList, 0, 7);
			add(songListView, 0, 6, 5, 1);
			add(lblID, 2, 7);
			add(txtID, 3, 7);
			add(btnDownload, 4, 7);
			
		}
		else
		{
			txtResponse.setText("NEE");
		}
	}
	
	public void PlayList() {
		sendCommand("PLAYLIST");
		String response = readResponse();
		txtResponse.setText(response);
		
		if(response.contains("JA")) {
			try {
				dis = new DataInputStream(client.getInputStream());

				for(int i = 0; i < 3; i++)
				{
					String songOption = dis.readUTF();
					songListView.getItems().add(songOption);
				}
			}
			catch(IOException ex) {
				ex.printStackTrace();
			}
		}
		
	}
	
    private void Download() {
    	sendCommand("ZEDEMGET " + txtID.getText());
    	String response = readResponse();
    	txtResponse.setText(response);
    	
    	if(response.contains(" JA"))
    	{
    		StringTokenizer token = new StringTokenizer(response, "#");
    		
    		String ID = token.nextToken();
    		String fileName = token.nextToken();
    		int fileSize = Integer.parseInt(token.nextToken());
    		
    		//Downloading the file to the desitnation (path)
    		File file = new File("data/client/"+fileName);
    		
    		try {
    			//fos will write to the file being created
    			FileOutputStream fos = new FileOutputStream(file);
    			//buffer to carry the data
    			byte[] buffer = new byte[1024];
    			int n = 0;
    			int totalBytes = 0;
    			
				/*//the data Input stream collects the bytes from the socket, 
				 these bytes are sent from the server through the data output stream on the server side
				 and delivered to the socket in the client side. The socket then uses its dataInputstream ..
				 to retrieve that data from the socket to be entered into the buffer which will then be copied into..
				 ..copied into a new file thats been created at the path "data/client/" + fileName*/
    			
    			//get data from client socket, read bytes into buffer (the process of reading stores it in buffer)
    			//use fileOutputstream to write to the file
    			
    			while(totalBytes != fileSize)
    			{
    				n = dis.read(buffer, 0, buffer.length);	//First we read from the buffer into n using the dataInputStream, from 0 to the buffer length
    				fos.write(buffer,0,n);	//we use the fileoutputStream to write to the buffer, from 0 to n
    				fos.flush();	
    				totalBytes += n;
    			}
    		}
    		catch(IOException e) {
    			e.printStackTrace();
    		}
    		
    	}
    	
    	
    }
	
	
	private void sendCommand(String command){
		try {
			pw = new PrintWriter(client.getOutputStream());
			pw.println(command);
			pw.flush();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	
	private String readResponse() {
		String serverResponse = "";
		
		try {
			br = new BufferedReader(new InputStreamReader(client.getInputStream()));
			serverResponse = br.readLine();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		return serverResponse;
	}

}
